

#include "stdafx.h"
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <fstream>
#include <iostream>
#include <queue>
#include <stdio.h>
#include <math.h>
#include "constants.h"
#include "findEyeCenter.h"
#include "findEyeCorner.h"
#include <cmath>
//#include "DebugHelpers.hpp"
#include <opencv2/highgui/highgui.hpp>


/** Constants **/

cv::String face_cascade_name = "C:/Arjun-EALAB Desktop/opencv/sources/data/haarcascades/haarcascade_frontalface_alt.xml";
cv::CascadeClassifier face_cascade;
cv::CascadeClassifier eye_cascade;
cv::String eye_cascade_name = "C:/Arjun-EALAB Desktop/opencv/sources/data/haarcascades/haarcascade_eye_tree_eyeglasses.xml";
std::string main_window_name = "Capture - Face detection";
std::string face_window_name = "Capture - Face";
cv::RNG rng(12345);
cv::Mat debugImage;
std::vector<cv::Point2f>  points4d;
cv::Mat skinCrCbHist = cv::Mat::zeros(cv::Size(256, 256), CV_8UC1);
 
void EstimatePose();
int named=0;
float Leftwidth ;
float LeftdeltaWMax ;
std::vector<cv::Rect> faces, eyes;
float Leftdeltawidth;  
float Leftdeltax ;
float DeltaX;
//Angle on Y Left Eye
float LeftHeight ;
float LeftdeltaHmax ;
int LeftdeltaHeight;
float Leftdeltay ;
int distancey;
int sinvalue,cosvalue;
int rsinvalue,rcosvalue;
//Angle on X Right Eye
float Rightdeltax;
float Rightdeltay;
cv::Rect eye_bb;
cv::Mat eye_tpl;
float interocular_distance_Calib;
float interocular_distance_current;
float Scale;
double gradienthreshold;
int Face_Width ;
int Face__height;
/** Function Headers */

void detectAndDisplay( cv::Mat frame );

/** Global variables */
//-- Note, either copy these two files from opencv/data/haarscascades to your current folder, or change these locations



using namespace std;


int main( int argc, const char** argv ) 
{
		CvCapture* capture;
		cv::Mat frame;
  		cv::CascadeClassifier eye_cascade;
		gradienthreshold= kGradientThreshold;
		
		setkGradientThreshold ( kGradientThreshold);
		Face_Width = kEyePercentWidth;
		Face__height =kEyePercentHeight;
	  // Load the cascades
		if( !face_cascade.load( face_cascade_name ) ){ printf("--(!)Error loading face cascade, please change face_cascade_name in source code.\n"); return -1; };

		cv::namedWindow(main_window_name,CV_WINDOW_NORMAL);
		cv::moveWindow(main_window_name, 400, 100);
		cv::namedWindow(face_window_name,CV_WINDOW_NORMAL);
		cv::moveWindow(face_window_name, 10, 100);
	 
   
		createCornerKernels();
		ellipse(skinCrCbHist, cv::Point(113, 155.6), cv::Size(23.4, 15.2),
				  43.0, 0.0, 360.0, cv::Scalar(255, 255, 255), -1);

	   // Read the video stream
		 capture = cvCaptureFromCAM( 0 );    
		if( capture ) 
		{
	 
					while( true )
					{
					  frame = cvQueryFrame( capture );
					  // mirror it
	   
					  cv::flip(frame, frame, 1);
					  cv::putText(frame, "'{Press 'H/N' to increase/decreas the height ", cv::Point(10,15), CV_FONT_HERSHEY_PLAIN, 1, CV_RGB(0,200,0));
					  cv::putText(frame, "Press'W/S' to decrease the width ", cv::Point(10,25), CV_FONT_HERSHEY_PLAIN, 1, CV_RGB(0,200,0));
					  cv::putText(frame, "Press 'G/B' to increase/decrease the gradient threshold ", cv::Point(10,35), CV_FONT_HERSHEY_PLAIN, 1, CV_RGB(0,200,0));
					  frame.copyTo(debugImage);

					  // Apply the classifier to the frame
					  if( !frame.empty() )
					  {
						detectAndDisplay( frame );
					  }
					  else 
					  {
						printf(" --(!) No captured frame -- Break!");
						break;
					  }
	  
					  //imshow(main_window_name,debugImage);

					  int c = cv::waitKey(10);
					  if( (char)c == 'g' ) 
					  {
						  gradienthreshold +=5;
						  setkGradientThreshold(gradienthreshold+5);
					  }
					  if( (char)c == 'w' ) 
					  {
					   Face_Width+=2;
					  }
						if( (char)c == 'h' ) 
					  {
							Face__height+=2;
					  }
					 if( (char)c == 'b' ) 
					 {
						 gradienthreshold +=5;
						 setkGradientThreshold(gradienthreshold-5); 
					 }
					  if( (char)c == 's' ) 
					  {
					   Face_Width-=2;
					  }
					  if( (char)c == 'n' ) 
					  {
							Face__height-=2;
					  }

			}
	  }

	  releaseCornerKernels();
  
	  return 0;
}



void findEyes(cv::Mat frame_gray, cv::Rect face,cv::Mat frame) 
{
	cv:: Mat grey = frame_gray.clone();
	cv::Mat faceROI = frame_gray(face);
	cv::Mat debugFace = faceROI;
 
 
	if (kSmoothFaceImage) 
		{
			double sigma = kSmoothFaceFactor * face.width;
			GaussianBlur( faceROI, faceROI, cv::Size( 0, 0 ), sigma);
		}
  //-- Find eye regions and draw them
	int eye_region_width = face.width * (Face_Width/100.0);
	int eye_region_height = face.width * (Face__height/100.0);
	int eye_region_top = face.height * (kEyePercentTop/100.0);
	cv::Rect leftEyeRegion(face.width*(kEyePercentSide/100.0),
                         eye_region_top,eye_region_width,eye_region_height);
	cv::Rect rightEyeRegion(face.width - eye_region_width - face.width*(kEyePercentSide/100.0),
                          eye_region_top,eye_region_width,eye_region_height);
  
  //-- Find Eye Centers
	cv::Point leftPupil = findEyeCenter(faceROI,leftEyeRegion,"Left Eye");
	cv::Point rightPupil = findEyeCenter(faceROI,rightEyeRegion,"Right Eye");
  // get corner regions
	cv::Rect leftRightCornerRegion(leftEyeRegion);
	leftRightCornerRegion.width -= leftPupil.x;
	leftRightCornerRegion.x += leftPupil.x;
	leftRightCornerRegion.height /= 2;
	leftRightCornerRegion.y += leftRightCornerRegion.height / 2;
	cv::Rect leftLeftCornerRegion(leftEyeRegion);
	leftLeftCornerRegion.width = leftPupil.x;
	leftLeftCornerRegion.height /= 2;
	leftLeftCornerRegion.y += leftLeftCornerRegion.height / 2;
	cv::Rect rightLeftCornerRegion(rightEyeRegion);
	rightLeftCornerRegion.width = rightPupil.x;
	rightLeftCornerRegion.height /= 2;
	rightLeftCornerRegion.y += rightLeftCornerRegion.height / 2;
	cv::Rect rightRightCornerRegion(rightEyeRegion);
	rightRightCornerRegion.width -= rightPupil.x;
	rightRightCornerRegion.x += rightPupil.x;
	rightRightCornerRegion.height /= 2;
	rightRightCornerRegion.y += rightRightCornerRegion.height / 2;
	cv::rectangle(debugFace,leftRightCornerRegion,200);
	cv::rectangle(debugFace,leftLeftCornerRegion,200);
	cv::rectangle(debugFace,rightRightCornerRegion,200);
	cv::rectangle(debugFace,rightLeftCornerRegion,200);

	leftPupil.x += leftEyeRegion.x;
	leftPupil.y += leftEyeRegion.y;
	//Angle on X Left Eye
	rightPupil.x += rightEyeRegion.x;
	rightPupil.y += rightEyeRegion.y;
	Leftwidth = (leftRightCornerRegion.width+leftLeftCornerRegion.width);
	Leftwidth-=(Leftwidth*0.25);
	LeftdeltaWMax = Leftwidth-Leftwidth/2;
	Leftdeltawidth=	.75*leftLeftCornerRegion.width - Leftwidth/2;  
	DeltaX = Leftdeltawidth/LeftdeltaWMax;
	Leftdeltax = (asinf(DeltaX) * 180.0/3.14159265);
 
	//Angle on Y Left Eye
	LeftHeight =leftRightCornerRegion.height;
    LeftHeight+=LeftHeight*0.50;
	LeftdeltaHmax = LeftHeight-LeftHeight/2;
	int distancex = (leftRightCornerRegion.x-leftRightCornerRegion.x)*(leftRightCornerRegion.x-leftRightCornerRegion.x);
	int distancey = (leftPupil.y-leftRightCornerRegion.y)*1.5;
 
	LeftdeltaHeight=distancey-LeftHeight/2;
	Leftdeltay = (asinf(LeftdeltaHeight/LeftdeltaHmax) * 180.0/3.14159265);
	
	circle(debugFace, rightPupil,3, 2000);
	circle(debugFace, leftPupil, 3, 2000);
	//Angle on X Right EYe
	Rightdeltax =  Leftdeltax;
	Rightdeltay = Leftdeltay;
	rightPupil.x += face.x;
	rightPupil.y += face.y;
  
	leftPupil.x += face.x;
	leftPupil.y += face.y;
	if(interocular_distance_Calib==0)
	{
		interocular_distance_Calib=rightPupil.x-leftPupil.x;
	}
	interocular_distance_current=rightPupil.x-leftPupil.x;
	Scale = interocular_distance_current/interocular_distance_Calib;
	int x,y,xr,yr =0;  
	float temp_x,temp_y,temp_xr,temp_yr;
	cosvalue=75*(cos(Leftdeltay*(3.14159265/180))*sin(Leftdeltay*(3.14159265/180)));	
	sinvalue=75*sin(Leftdeltax*(3.14159265/180))*cos(Leftdeltax*(3.14159265/180));
	rcosvalue=75*cos(Rightdeltay*(3.14159265/180))*sin(Rightdeltay*(3.14159265/180));
	rsinvalue=75*sin(Rightdeltax*(3.14159265/180))*cos(Rightdeltax*(3.14159265/180));
	x=leftPupil.x+sinvalue;
	y=leftPupil.y+cosvalue ;
	xr=rightPupil.x+rsinvalue;
	yr=rightPupil.y+rcosvalue;
	cv::line(frame,cv::Point(leftPupil.x,leftPupil.y),cv::Point(x-15*Scale,y+15*Scale),(255,255,0));
	cv::line(frame,cv::Point(leftPupil.x,leftPupil.y),cv::Point(x-15*Scale,y-15*Scale),(255,255,0));
	cv::line(frame,cv::Point(x-15*Scale,y-15*Scale),cv::Point(x-15*Scale,y+15*Scale),(255,0,0));
	cv::line(frame,cv::Point(leftPupil.x,leftPupil.y),cv::Point(x+15*Scale,y+15*Scale),(255,255,0));
	cv::line(frame,cv::Point(leftPupil.x,leftPupil.y),cv::Point(x+15*Scale,y-15*Scale),(255,255,0));
	cv::line(frame,cv::Point(x+15*Scale,y-15*Scale),cv::Point(x+15*Scale,y+15*Scale),(255,0,0));
	cv::line(frame,cv::Point(x-15*Scale,y+15*Scale),cv::Point(x+15*Scale,y+15*Scale),(255,0,0));
	cv::line(frame,cv::Point(x-15*Scale,y-15*Scale),cv::Point(x+15*Scale,y-15*Scale),(255,0,0));
	cv::line(frame,cv::Point(rightPupil.x,rightPupil.y),cv::Point(xr+15*Scale,yr+15*Scale),(255,255,0));
	cv::line(frame,cv::Point(rightPupil.x,rightPupil.y),cv::Point(xr+15*Scale,yr-15*Scale),(255,255,0));
	cv::line(frame,cv::Point(xr+15*Scale,yr+15*Scale),cv::Point(xr+15*Scale,yr-15*Scale),(255,0,0));
	cv::line(frame,cv::Point(rightPupil.x,rightPupil.y),cv::Point(xr-15*Scale,yr+15*Scale),(255,255,0));
	cv::line(frame,cv::Point(rightPupil.x,rightPupil.y),cv::Point(xr-15*Scale,yr-15*Scale),(255,255,0));
	cv::line(frame,cv::Point(xr-15*Scale,yr+15*Scale),cv::Point(xr-15*Scale,yr-15*Scale),(255,0,0));
	cv::line(frame,cv::Point(xr+15*Scale,yr+15*Scale),cv::Point(xr-15*Scale,yr+15*Scale),(255,0,0));
	cv::line(frame,cv::Point(xr+15*Scale,yr-15*Scale),cv::Point(xr-15*Scale,yr-15*Scale),(255,0,0));
	cv::Rect rec(leftPupil.x-100*Scale,leftPupil.y-100*Scale,100*Scale,100*Scale);
	

  //-- Find Eye Corners
  if (kEnableEyeCorner) 
	{
		cv::Point2f leftRightCorner = findEyeCorner(faceROI(leftRightCornerRegion), true, false);
		leftRightCorner.x += leftRightCornerRegion.x;
		leftRightCorner.y += leftRightCornerRegion.y;
		cv::Point2f leftLeftCorner = findEyeCorner(faceROI(leftLeftCornerRegion), true, true);
		leftLeftCorner.x += leftLeftCornerRegion.x;
		leftLeftCorner.y += leftLeftCornerRegion.y;
		cv::Point2f rightLeftCorner = findEyeCorner(faceROI(rightLeftCornerRegion), false, true);
		rightLeftCorner.x += rightLeftCornerRegion.x;
		rightLeftCorner.y += rightLeftCornerRegion.y;
		cv::Point2f rightRightCorner = findEyeCorner(faceROI(rightRightCornerRegion), false, false);
		rightRightCorner.x += rightRightCornerRegion.x;
		rightRightCorner.y += rightRightCornerRegion.y;
		circle(faceROI, leftRightCorner, 3, 200);
		circle(faceROI, leftLeftCorner, 3, 200);
		circle(faceROI, rightLeftCorner, 3, 200);
		circle(faceROI, rightRightCorner, 3, 200);
  }
  cv::namedWindow("Hello",CV_WINDOW_NORMAL);
  circle(grey,rightPupil,3,2000);
  circle(grey,leftPupil,3,2000);
  imshow("Hello",frame);
  imshow(face_window_name, debugFace);
  imwrite("frame100.jpg", frame); 
	 
}


cv::Mat findSkin (cv::Mat &frame) 
{
  cv::Mat input;
  cv::Mat output = cv::Mat(frame.rows,frame.cols, CV_8U);
  cvtColor(frame, input, CV_BGR2YCrCb);
  for (int y = 0; y < input.rows; ++y) 
  {
		const cv::Vec3b *Mr = input.ptr<cv::Vec3b>(y);
		//    uchar *Or = output.ptr<uchar>(y);
		cv::Vec3b *Or = frame.ptr<cv::Vec3b>(y);
		for (int x = 0; x < input.cols; ++x) 
		{
			cv::Vec3b ycrcb = Mr[x];
//			Or[x] = (skinCrCbHist.at<uchar>(ycrcb[1], ycrcb[2]) > 0) ? 255 : 0;
			if(skinCrCbHist.at<uchar>(ycrcb[1], ycrcb[2]) == 0) 
			{
				Or[x] = cv::Vec3b(0,0,0);
		
			}
		}
  }
  return output;
}

/**
 * @function detectAndDisplay
 */
void detectAndDisplay( cv::Mat frame ) 
{
  std::vector<cv::Rect> faces;
  std::vector<cv::Rect> eyes;
  //cv::Mat frame_gray;
  points4d.resize(4);
  std::vector<cv::Mat> rgbChannels(3);
  cv::split(frame, rgbChannels);
  cv::Mat frame_gray = rgbChannels[2];
  cv::Mat frame_, eye_tpl;
  //cvtColor( frame, frame_gray, CV_BGR2GRAY );
  //equalizeHist( frame_gray, frame_gray );
  //cv::pow(frame_gray, CV_64F, frame_gray);
  //-- Detect faces
  face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE|CV_HAAR_FIND_BIGGEST_OBJECT, cv::Size(150, 150) );
  //  findSkin(debugImage);
 
 
  if (faces.size() > 0) 
  {
    findEyes(frame_gray, faces[0],frame);
  }
  
}





 

